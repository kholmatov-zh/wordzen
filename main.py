import os
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from keep_alive import keep_alive
import sqlite3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",") if admin_id]
if not ADMIN_IDS:
    raise ValueError("ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
CHANNEL_LINK = "https://t.me/your_channel"
CARD_NUMBER = "1234 5678 9012 3456"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_name="users.db"):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            email TEXT UNIQUE,
            telegram TEXT,
            books TEXT,
            trial_end TEXT,
            payment_due TEXT,
            paid_months INTEGER DEFAULT 0,
            payment_confirmed INTEGER DEFAULT 0
        )''')
        self.conn.commit()

    def add_user(self, user_id, email, telegram, books):
        trial_end = (datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')
        self.cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, email, telegram, books, trial_end, payment_due) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, email, telegram, books, trial_end, trial_end)
        )
        self.conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user_id={user_id}, email={email}, telegram={telegram}, books={books}")

    def get_user(self, user_id):
        self.cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        result = self.cursor.fetchone()
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={result}")
        return result

    def update_payment(self, user_id, months, bonus=0):
        total = months + bonus
        self.cursor.execute(
            "UPDATE users SET paid_months = paid_months + ?, payment_confirmed = 1, payment_due = ? WHERE user_id = ?",
            (total, (datetime.now() + timedelta(days=30 * total)).strftime('%Y-%m-%d'), user_id)
        )
        self.conn.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: user_id={user_id}, months={months}, bonus={bonus}")

    def get_unpaid_users(self, date):
        self.cursor.execute("SELECT email, telegram FROM users WHERE payment_due = ? AND payment_confirmed = 0", (date,))
        return self.cursor.fetchall()

    def get_users_near_trial_end(self, date):
        self.cursor.execute("SELECT email, telegram FROM users WHERE trial_end = ? AND payment_confirmed = 0", (date,))
        return self.cursor.fetchall()

    def get_all_users(self):
        self.cursor.execute("SELECT user_id, email, telegram, trial_end, paid_months, payment_confirmed FROM users")
        return self.cursor.fetchall()

db = Database()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è email –∫–∞–∫ —Å—Å—ã–ª–∫–∏
def obfuscate_email(email):
    parts = email.split("@")
    if len(parts) == 2:
        domain = parts[1].split(".")
        if len(domain) >= 2:
            obfuscated = parts[0] + "@\u200B" + ".".join(domain[:-1]) + ".\u200B" + domain[-1]
        else:
            obfuscated = parts[0] + "@\u200B" + parts[1]
    else:
        obfuscated = email
    return obfuscated

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    )

def get_start_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("\u25B6\uFE0F –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration"))

def get_books_keyboard(selected_books=[]):
    books = ["–ö–Ω–∏–≥–∞ 1", "–ö–Ω–∏–≥–∞ 2", "–ö–Ω–∏–≥–∞ 3", "–ö–Ω–∏–≥–∞ 4"]
    markup = InlineKeyboardMarkup(row_width=2)
    for book in books:
        prefix = "\u2705 " if book in selected_books else ""
        markup.add(InlineKeyboardButton(prefix + book, callback_data=f"book_{book}"))
    markup.add(InlineKeyboardButton("\U0001F4E6 –ì–æ—Ç–æ–≤–æ", callback_data="confirm_books"))
    return markup

def get_payment_options(user_id):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üìÖ 1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ", callback_data=f"pay_1_{user_id}"),
        InlineKeyboardButton("üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 300‚ÇΩ +1 –º–µ—Å üéÅ", callback_data=f"pay_3_{user_id}")
    )

def get_confirmation_buttons(user_id):
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (1 –º–µ—Å)", callback_data=f"payment_approve_{user_id}_1"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (3 –º–µ—Å)", callback_data=f"payment_approve_{user_id}_3"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"payment_reject_{user_id}")
    )

def get_profile_buttons(email):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"extend_subscription_{email}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_user_info(user_id, email, telegram, books, trial_end, payment_due, paid, confirmed):
    obfuscated_email = obfuscate_email(email)
    return (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"üÜî User ID: `{user_id}`\n"
        f"üìß Email: `{obfuscated_email}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"‚è≥ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: *{trial_end}*\n"
        f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: *{payment_due}*\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤: {paid}\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω–æ' if confirmed else '–ü—Ä–æ–±–Ω—ã–π/–Ω–µ –æ–ø–ª–∞—á–µ–Ω'}"
    )

def calculate_bonus(months):
    return 1 if months == 3 else 0

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    email = State()
    telegram = State()
    books = State()
    payment = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    try:
        with open("wordzen_logo.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo=photo,
                caption=(
                    "\U0001F4DA *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wordzen!*\n\n"
                    "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º.\n\n"
                    "\U0001F381 *3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!*\n\n"
                    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å \U0001F447"
                ),
                parse_mode="Markdown",
                reply_markup=get_start_button()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query_handler(lambda c: c.data == "start_registration")
async def start_registration(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("\U0001F4E7 –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await UserState.email.set()

@dp.message_handler(state=UserState.email)
async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    await UserState.telegram.set()

@dp.message_handler(state=UserState.telegram)
async def get_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text, user_id=message.from_user.id)
    await state.update_data(books=[])
    await message.answer("\U0001F4DA –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —à—Ç—É–∫:", reply_markup=get_books_keyboard())
    await UserState.books.set()

@dp.callback_query_handler(lambda c: c.data.startswith("book_"), state=UserState.books)
async def choose_books(callback_query: types.CallbackQuery, state: FSMContext):
    book = callback_query.data[5:]
    user_data = await state.get_data()
    chosen_books = user_data.get("books", [])

    if book in chosen_books:
        chosen_books.remove(book)
    elif len(chosen_books) < 3:
        chosen_books.append(book)
    else:
        await callback_query.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–∏–≥–∏.")
        return

    await state.update_data(books=chosen_books)
    selected_text = (
        "\U0001F4DA *–í—ã –≤—ã–±—Ä–∞–ª–∏:*\n" + "\n".join([f"‚Ä¢ {b}" for b in chosen_books])
        if chosen_books else "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏."
    )
    await callback_query.message.edit_text(
        selected_text + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3 –∫–Ω–∏–≥:",
        reply_markup=get_books_keyboard(chosen_books),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "confirm_books", state=UserState.books)
async def confirm_books(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data["user_id"]
    email = user_data["email"]
    telegram = user_data["telegram"]
    books = ", ".join(user_data.get("books", []))
    db.add_user(user_id, email, telegram, books)

    text = (
        f"üìù *–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* üéâ\n\n"
        f"üìß Email: `{obfuscate_email(email)}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"‚è≥ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: *{(datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')}*\n\n"
        f"üí≥ –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ."
    )
    buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_options")
    )
    await callback_query.message.edit_text(text, reply_markup=buttons, parse_mode="Markdown")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "payment_options")
async def show_tariffs(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è user_id={user_id}")
    await callback_query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_payment_options(user_id))

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def start_payment(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split("_")
    months = int(parts[1])
    user_id = int(parts[2])
    user = db.get_user(user_id)
    if user:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã: user_id={user_id}, months={months}")
        await state.update_data(user_id=user_id, months=months, email=user[2])  # Email –∏–∑ –±–∞–∑—ã
        await callback_query.message.answer(
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{months} –º–µ—Å.*\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{CARD_NUMBER}`\n\n"
            f"üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –¥–æ 30 –º–∏–Ω.",
            parse_mode="Markdown"
        )
        await UserState.payment.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: UserState.payment –¥–ª—è user_id={user_id}")
    else:
        await callback_query.message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")

@dp.message_handler(state=UserState.payment, content_types=types.ContentType.ANY)
async def receive_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    email = user_data.get("email")
    months = user_data.get("months")
    if not all([user_id, email, months]):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ state: user_id={user_id}, email={email}, months={months}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return

    telegram = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    caption = f"üì• –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\nüÜî User ID: {user_id}\nüìß Email: {obfuscate_email(email)}\nüë§ Telegram: {telegram}\nüìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {months} –º–µ—Å"

    try:
        for admin_id in ADMIN_IDS:
            if message.photo:
                await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption, reply_markup=get_confirmation_buttons(user_id))
            elif message.document:
                await bot.send_document(admin_id, message.document.file_id, caption=caption, reply_markup=get_confirmation_buttons(user_id))
            else:
                await bot.send_message(admin_id, caption + f"\n\nüìÑ –¢–µ–∫—Å—Ç:\n{message.text}", reply_markup=get_confirmation_buttons(user_id))
        await message.reply("üßæ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        logger.info(f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É: user_id={user_id}, months={months}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.finish()
@dp.callback_query_handler(lambda c: c.data.startswith("payment_approve_"))
async def confirm_payment(callback_query: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    parts = callback_query.data.split("_")
    user_id = int(parts[2])
    months = int(parts[3])
    user = db.get_user(user_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    email = user[2]
    bonus = calculate_bonus(months)
    db.update_payment(user_id, months, bonus)

    await callback_query.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {obfuscate_email(email)}. –î–æ–±–∞–≤–ª–µ–Ω–æ: {months} –º–µ—Å + {bonus} –º–µ—Å üéÅ")
    await bot.send_message(
        user_id,
        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é.",
        reply_markup=get_main_menu()
    )
    await bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ +{bonus} –º–µ—Å—è—Ü–µ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
    logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: user_id={user_id}, months={months}, bonus={bonus}")

@dp.callback_query_handler(lambda c: c.data.startswith("payment_reject_"))
async def reject_payment(callback_query: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    user_id = int(callback_query.data.split("_")[2])
    await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    logger.info(f"–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_info(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id: {user_id}")
    user = db.get_user(user_id)
    if user:
        user_id, _, email, telegram, books, trial_end, payment_due, paid, confirmed = user
        text = format_user_info(user_id, email, telegram, books, trial_end, payment_due, paid, confirmed) + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∂–µ:"
        await message.answer(text, reply_markup=get_profile_buttons(email), parse_mode="Markdown")
    else:
        await message.answer(
            "üëã *–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Wordzen!*\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("\u25B6\uFE0F –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="start_registration")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith("extend_subscription_"))
async def extend_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    email = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    if user and user[2] == email:
        await callback_query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=get_payment_options(user_id))
    else:
        await callback_query.message.edit_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

@dp.message_handler(commands=["users"])
async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    users = db.get_all_users()
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        user_id, email, telegram, trial_end, paid, confirmed = user
        text += f"\nüÜî {user_id}\nüìß {obfuscate_email(email)}\nüë§ {telegram}\n‚è≥ –î–æ: {trial_end}\nüí∞ –ú–µ—Å—è—Ü–µ–≤: {paid}\n‚úÖ –û–ø–ª–∞—á–µ–Ω: {'–î–∞' if confirmed else '–ù–µ—Ç'}\n---"
    await message.answer(text)

async def check_payments():
    while True:
        now = datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

        for email, telegram in db.get_unpaid_users(now):
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚ùó –£—á–µ–Ω–∏–∫ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª:\nEmail: {obfuscate_email(email)}\nTelegram: {telegram}")

        for email, telegram in db.get_users_near_trial_end(tomorrow):
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–∞–ª —É:\nEmail: {obfuscate_email(email)}\nTelegram: {telegram}")
            try:
                await bot.send_message(telegram, f"‚è≥ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ Wordzen. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: {CARD_NUMBER}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {telegram}: {e}")
        await asyncio.sleep(86400)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ webhook'–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
async def on_startup(_):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook: {webhook_info.url}. –£–¥–∞–ª—è–µ–º –µ–≥–æ...")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω.")
    else:
        logger.info("Webhook –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å polling.")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    keep_alive()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(dp))
    loop.create_task(check_payments())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
