import os
import asyncio
import logging
import random
import string
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from keep_alive import keep_alive
import psycopg2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",") if admin_id]
if not ADMIN_IDS:
    raise ValueError("ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
CARD_NUMBER = "1234 5678 9012 3456"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase
class Database:
    def __init__(self):
        self.conn = psycopg2.connect(os.getenv("DATABASE_URL"))
        self.cursor = self.conn.cursor()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
        self._create_tables()
        self._initialize_promo_codes()

    def _create_tables(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE,
            source TEXT,
            email TEXT UNIQUE,
            telegram TEXT,
            books TEXT,
            trial_end TEXT,
            payment_due TEXT,
            paid_months INTEGER DEFAULT 0,
            payment_confirmed INTEGER DEFAULT 0,
            promo_code TEXT,
            is_active INTEGER DEFAULT 1
        )''')
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            teacher_name TEXT,
            used_count INTEGER DEFAULT 0,
            bonus_days INTEGER DEFAULT 7
        )''')
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            message_text TEXT,
            is_from_user INTEGER DEFAULT 1,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        self.conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    def _initialize_promo_codes(self):
        promo_codes = [
            "Teacher01", "Teacher02", "Teacher03", "Teacher04", "Teacher05",
            "Teacher06", "Teacher07", "Teacher08", "Teacher09", "Teacher10",
            "Teacher11", "Teacher12", "Teacher13", "Teacher14", "Teacher15"
        ]
        for code in promo_codes:
            self.cursor.execute(
                "INSERT INTO promo_codes (code, teacher_name, used_count, bonus_days) VALUES (%s, %s, 0, 7) ON CONFLICT (code) DO NOTHING",
                (code, code, )
            )
        self.conn.commit()
        logger.info("–ü—Ä–æ–º–æ–∫–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def add_user(self, user_id, source, email, telegram, books, promo_code=None):
        trial_end = (datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')
        if promo_code:
            promo = self.get_promo_code(promo_code)
            if promo:
                bonus_days = promo[3]
                trial_end = (datetime.now() + timedelta(days=3 + bonus_days)).strftime('%Y-%m-%d')
                self.cursor.execute("UPDATE promo_codes SET used_count = used_count + 1 WHERE code = %s", (promo_code,))
        self.cursor.execute(
            "INSERT INTO users (user_id, source, email, telegram, books, trial_end, payment_due, promo_code) VALUES (%s, %s, %s, %s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING",
            (user_id, source, email, telegram, books, trial_end, trial_end, promo_code)
        )
        self.conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user_id={user_id}, source={source}, email={email}, promo_code={promo_code}")

    def get_user(self, user_id):
        self.cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        result = self.cursor.fetchone()
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={result}")
        return result

    def update_payment(self, user_id, months, bonus=0):
        total = months + bonus
        self.cursor.execute(
            "UPDATE users SET paid_months = paid_months + %s, payment_confirmed = 1, payment_due = %s, is_active = 1 WHERE user_id = %s",
            (total, (datetime.now() + timedelta(days=30 * total)).strftime('%Y-%m-%d'), user_id)
        )
        self.conn.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞: user_id={user_id}, months={months}, bonus={bonus}")

    def deactivate_user(self, user_id):
        self.cursor.execute("UPDATE users SET is_active = 0 WHERE user_id = %s", (user_id,))
        self.conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: user_id={user_id}")

    def reset_books(self, user_id):
        self.cursor.execute("UPDATE users SET books = NULL WHERE user_id = %s", (user_id,))
        self.conn.commit()
        logger.info(f"–ö–Ω–∏–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è user_id={user_id}")

    def get_promo_code(self, code):
        self.cursor.execute("SELECT code, teacher_name, used_count, bonus_days FROM promo_codes WHERE code = %s", (code,))
        return self.cursor.fetchone()

    def get_promo_stats(self):
        self.cursor.execute("SELECT code, teacher_name, used_count, bonus_days FROM promo_codes")
        return self.cursor.fetchall()

    def get_unpaid_users(self, date):
        self.cursor.execute("SELECT user_id, email, telegram FROM users WHERE payment_due = %s AND payment_confirmed = 0 AND is_active = 1", (date,))
        return self.cursor.fetchall()

    def get_users_near_trial_end(self, date):
        self.cursor.execute("SELECT user_id, email, telegram FROM users WHERE trial_end = %s AND payment_confirmed = 0 AND is_active = 1", (date,))
        return self.cursor.fetchall()

    def get_all_users(self):
        self.cursor.execute("SELECT user_id, source, email, telegram, books, trial_end, payment_due, paid_months, payment_confirmed, promo_code, is_active FROM users")
        return self.cursor.fetchall()

    def get_stats(self):
        self.cursor.execute("SELECT COUNT(*) FROM users")
        total_users = self.cursor.fetchone()[0]
        self.cursor.execute("SELECT COUNT(*) FROM users WHERE payment_confirmed = 1")
        paid_users = self.cursor.fetchone()[0]
        self.cursor.execute("SELECT COUNT(*) FROM users WHERE promo_code IS NOT NULL")
        promo_users = self.cursor.fetchone()[0]
        return total_users, paid_users, promo_users

    def add_message(self, user_id, message_text, is_from_user=True):
        self.cursor.execute(
            "INSERT INTO messages (user_id, message_text, is_from_user) VALUES (%s, %s, %s)",
            (user_id, message_text, 1 if is_from_user else 0)
        )
        self.conn.commit()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: user_id={user_id}, from_user={is_from_user}")

    def get_user_messages(self, user_id):
        self.cursor.execute("SELECT message_text, is_from_user, timestamp FROM messages WHERE user_id = %s ORDER BY timestamp", (user_id,))
        return self.cursor.fetchall()

db = Database()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è email –∫–∞–∫ —Å—Å—ã–ª–∫–∏
def obfuscate_email(email):
    parts = email.split("@")
    if len(parts) == 2:
        domain = parts[1].split(".")
        if len(domain) >= 2:
            obfuscated = parts[0] + "@\u200B" + ".".join(domain[:-1]) + ".\u200B" + domain[-1]
        else:
            obfuscated = parts[0] + "@\u200B" + parts[1]
    else:
        obfuscated = email
    return obfuscated

# –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
BOOKS = [
    "Essential 1", "Essential 2", "Essential 3", "Essential 4", "Essential 5", "Essential 6",
    "Essential 1 (rus)", "Essential 2 (rus)", "Essential 3 (rus)", "Essential 4 (rus)", "Essential 5 (rus)", "Essential 6 (rus)",
    "English vocabulary in use elementary", "English vocabulary in use intermediate", 
    "English vocabulary in use upper-intermediate", "English vocabulary in use advanced",
    "English vocabulary in use elementary (rus)", "English vocabulary in use intermediate (rus)", 
    "English vocabulary in use upper-intermediate (rus)", "English vocabulary in use advanced (rus)"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª–∏–º"),
        KeyboardButton("üì© –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à")
    )

def get_start_button():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("\u25B6\uFE0F –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à", callback_data="start_registration"))

def get_source_keyboard():
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("Instagram", callback_data="source_instagram"),
        InlineKeyboardButton("–é“õ–∏—Ç—É–≤—á–∏–¥–∞–Ω", callback_data="source_teacher")
    )

def get_payment_options(user_id):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üìÖ 1 –æ–π ‚Äî 100 —Å—û–º", callback_data=f"pay_1_{user_id}"),
        InlineKeyboardButton("üìÖ 3 –æ–π ‚Äî 300 —Å—û–º +1 –æ–π üéÅ", callback_data=f"pay_3_{user_id}")
    )

def get_confirmation_buttons(user_id):
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à (1 –æ–π)", callback_data=f"payment_approve_{user_id}_1"),
        InlineKeyboardButton("‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à (3 –æ–π)", callback_data=f"payment_approve_{user_id}_3"),
        InlineKeyboardButton("‚ùå –†–∞–¥ —ç—Ç–∏—à", callback_data=f"payment_reject_{user_id}")
    )

def get_profile_buttons(email):
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üí≥ –û–±—É–Ω–∞–Ω–∏ —É–∑–∞–π—Ç–∏—Ä–∏—à", callback_data=f"extend_subscription_{email}"),
        InlineKeyboardButton("üîô –û—Ä“õ–∞–≥–∞", callback_data="back_to_menu")
    )

def get_reset_books_button(user_id):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üìö –Ø–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞—à", callback_data=f"reset_books_{user_id}")
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_user_info(user_id, source, email, telegram, books, trial_end, payment_due, paid, confirmed, promo_code, is_active):
    obfuscated_email = obfuscate_email(email)
    return (
        f"üë§ *–°–∏–∑–Ω–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑:*\n"
        f"üÜî –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: `{user_id}`\n"
        f"üì° –ë–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω —Ç–æ–ø–¥–∏–Ω–≥–∏–∑: {source}\n"
        f"üìß Email: `{obfuscated_email}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–∏—Ç–æ–±–ª–∞—Ä: {books or '—Ç–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω'}\n"
        f"‚è≥ –°–∏–Ω–æ–≤ –º—É–¥–¥–∞—Ç–∏: *{trial_end}*\n"
        f"‚è≥ –û–±—É–Ω–∞ –º—É–¥–¥–∞—Ç–∏: *{payment_due}*\n"
        f"üí∞ –¢—û–ª–∞–Ω–≥–∞–Ω –æ–π–ª–∞—Ä: {paid}\n"
        f"‚úÖ “≤–æ–ª–∞—Ç: {'–¢—û–ª–∞–Ω–≥–∞–Ω' if confirmed else '–°–∏–Ω–æ–≤/—Ç—û–ª–∞–Ω–º–∞–≥–∞–Ω'}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}\n"
        f"üîÑ –ê–∫—Ç–∏–≤–ª–∏–∫: {'–§–∞–æ–ª' if is_active else '–é—á–∏—Ä–∏–ª–≥–∞–Ω'}"
    )

def calculate_bonus(months):
    return 1 if months == 3 else 0

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    source = State()
    promo = State()
    email = State()
    telegram = State()
    books = State()
    payment = State()
    message_to_admin = State()
    reply_to_user = State()
    reset_books = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    try:
        with open("wordzen_logo.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo=photo,
                caption=(
                    "\U0001F4DA *Wordzen'–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!*\n\n"
                    "–ë—É –µ—Ä–¥–∞ —Å–∏–∑ —Ç–∞–Ω–ª–∞–Ω–≥–∞–Ω –∫–∏—Ç–æ–±–ª–∞—Ä–≥–∞ —ç–≥–∞ –±—û–ª–∞—Å–∏–∑.\n\n"
                    "\U0001F381 *–Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —É—á—É–Ω 3 –∫—É–Ω–ª–∏–∫ –±–µ–ø—É–ª –º—É–¥–¥–∞—Ç!*\n\n"
                    "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥ \U0001F447"
                ),
                parse_mode="Markdown",
                reply_markup=get_start_button()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ö–µ–π–∏–Ω—Ä–æ“õ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")

@dp.callback_query_handler(lambda c: c.data == "start_registration")
async def start_registration(callback_query: types.CallbackQuery):
    user = db.get_user(callback_query.from_user.id)
    if user and user[11] == 1:  # is_active
        await callback_query.message.delete()
        await callback_query.message.answer("–°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑. –ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω '–ü—Ä–æ—Ñ–∏–ª–∏–º' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=get_main_menu())
        return
    elif user and user[11] == 0:  # is_active = 0
        await callback_query.message.delete()
        await callback_query.message.answer(
            "‚ùå –°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–¥–∏ –≤–∞ —Å–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏–Ω–≥–∏–∑.\n"
            "–Ø–Ω–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥ –≤–∞ —á–µ–∫–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.",
            reply_markup=get_payment_options(callback_query.from_user.id)
        )
        await UserState.payment.set()
        await callback_query.message.answer("üí≥ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
        return
    await callback_query.message.delete()
    await callback_query.message.answer("–ë–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω —Ç–æ–ø–¥–∏–Ω–≥–∏–∑?", reply_markup=get_source_keyboard())
    await UserState.source.set()

@dp.callback_query_handler(lambda c: c.data.startswith("source_"), state=UserState.source)
async def get_source(callback_query: types.CallbackQuery, state: FSMContext):
    source = "Instagram" if callback_query.data == "source_instagram" else "–é“õ–∏—Ç—É–≤—á–∏–¥–∞–Ω"
    await state.update_data(source=source)
    if source == "–é“õ–∏—Ç—É–≤—á–∏–¥–∞–Ω":
        await callback_query.message.edit_text("–°–∏–∑–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ—Ä–º–∏? –£–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ —ë–∫–∏ '–π—û“õ' –¥–µ–± —ë–∑–∏–Ω–≥:")
        await UserState.promo.set()
    else:
        await state.update_data(promo_code=None)
        await callback_query.message.edit_text("\U0001F4E7 Email –º–∞–Ω–∑–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
        await UserState.email.set()

@dp.message_handler(state=UserState.promo)
async def get_promo(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper() if message.text.lower() != '–π—û“õ' else None
    if promo_code:
        promo = db.get_promo_code(promo_code)
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Ç–æ–ø–∏–ª–º–∞–¥–∏. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥ —ë–∫–∏ '–π—û“õ' –¥–µ–± —ë–∑–∏–Ω–≥:")
            return
    await state.update_data(promo_code=promo_code)
    await message.answer("\U0001F4E7 Email –º–∞–Ω–∑–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await UserState.email.set()

@dp.message_handler(state=UserState.email)
async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("Telegram –∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥–∏–∑ –ª–∏–Ω–∫–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω, @username):")
    await UserState.telegram.set()

@dp.message_handler(state=UserState.telegram)
async def get_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text, user_id=message.from_user.id)
    await message.answer(
        "üìö –ö–∏—Ç–æ–±–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–¥–∞–Ω 3 —Ç–∞ –∫–∏—Ç–æ–± —Ç–∞–Ω–ª–∞–Ω–≥. –†–∞“õ–∞–º–ª–∞—Ä–Ω–∏ —é–±–æ—Ä–∏–Ω–≥, –º–∞—Å–∞–ª–∞–Ω:\n"
        "1\n2\n3\n\n"
        "–†—û–π—Ö–∞—Ç:\n" + "\n".join(f"{i+1}. {book}" for i, book in enumerate(BOOKS))
    )
    await UserState.books.set()

@dp.message_handler(state=UserState.books)
async def choose_books(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data["user_id"]
    source = user_data["source"]
    email = user_data["email"]
    telegram = user_data["telegram"]
    promo_code = user_data.get("promo_code")

    try:
        book_indices = [int(i.strip()) - 1 for i in message.text.split("\n") if i.strip().isdigit()]
        if len(book_indices) != 3:
            await message.answer("–ò–ª—Ç–∏–º–æ—Å, –∞–π–Ω–∞–Ω 3 —Ç–∞ –∫–∏—Ç–æ–± —Ç–∞–Ω–ª–∞–Ω–≥. –†–∞“õ–∞–º–ª–∞—Ä–Ω–∏ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥:")
            return
        if any(i < 0 or i >= len(BOOKS) for i in book_indices):
            await message.answer("–ù–æ—Ç—û“ì—Ä–∏ —Ä–∞“õ–∞–º–ª–∞—Ä. –†—û–π—Ö–∞—Ç–¥–∞–Ω 3 —Ç–∞ –∫–∏—Ç–æ–± —Ä–∞“õ–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
            return
        books = ", ".join(BOOKS[i] for i in book_indices)
    except ValueError:
        await message.answer("–†–∞“õ–∞–º–ª–∞—Ä–Ω–∏ —Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥, –º–∞—Å–∞–ª–∞–Ω:\n1\n2\n3")
        return

    db.add_user(user_id, source, email, telegram, books, promo_code)
    user = db.get_user(user_id)
    trial_end = user[6]  # trial_end –∏–∑ –±–∞–∑—ã

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        f"üìù *–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è–∫—É–Ω–ª–∞–Ω–¥–∏!* üéâ\n\n"
        f"üì° –ë–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω —Ç–æ–ø–¥–∏–Ω–≥–∏–∑: {source}\n"
        f"üìß Email: `{obfuscate_email(email)}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–∏—Ç–æ–±–ª–∞—Ä: {books}\n"
        f"‚è≥ –°–∏–Ω–æ–≤ –º—É–¥–¥–∞—Ç–∏: *{trial_end}*\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}\n\n"
        f"üí≥ –§–æ–π–¥–∞–ª–∞–Ω–∏—à–Ω–∏ –¥–∞–≤–æ–º —ç—Ç—Ç–∏—Ä–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥."
    )
    await message.answer(text, reply_markup=get_payment_options(user_id), parse_mode="Markdown")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    admin_text = (
        f"üì• –Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏:\n\n"
        f"üÜî –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: {user_id}\n"
        f"üì° –ë–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω —Ç–æ–ø–¥–∏: {source}\n"
        f"üìß Email: {obfuscate_email(email)}\n"
        f"üë§ Telegram: {telegram}\n"
        f"üìö –ö–∏—Ç–æ–±–ª–∞—Ä: {books}\n"
        f"‚è≥ –°–∏–Ω–æ–≤ –º—É–¥–¥–∞—Ç–∏: {trial_end}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}"
    )
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_text)

    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def start_payment(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split("_")
    months = int(parts[1])
    user_id = int(parts[2])
    user = db.get_user(user_id)
    if user:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã: user_id={user_id}, months={months}")
        await state.update_data(user_id=user_id, months=months, email=user[3])
        await callback_query.message.answer(
            f"üí≥ –°–∏–∑ —Ç–∞–Ω–ª–∞–≥–∞–Ω —Ç–∞—Ä–∏—Ñ: *{months} –æ–π*\n"
            f"–ö–∞—Ä—Ç–∞ —Ä–∞“õ–∞–º–∏: `{CARD_NUMBER}`\n\n"
            f"üì∏ –¢—û–ª–æ–≤–¥–∞–Ω —Å—û–Ω–≥ —á–µ–∫–Ω–∏ –±—É –µ—Ä–≥–∞ —é–±–æ—Ä–∏–Ω–≥ (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç —ë–∫–∏ –º–∞—Ç–Ω). –¢–µ–∫—à–∏—Ä–∏—à ‚Äî 30 –¥–∞“õ–∏“õ–∞ –∏—á–∏–¥–∞.",
            parse_mode="Markdown"
        )
        await UserState.payment.set()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: UserState.payment –¥–ª—è user_id={user_id}")
    else:
        await callback_query.message.answer("‚ùó –°–∏–∑–Ω–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

@dp.message_handler(state=UserState.payment, content_types=types.ContentType.ANY)
async def receive_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    email = user_data.get("email")
    months = user_data.get("months")
    if not all([user_id, email, months]):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ state: user_id={user_id}, email={email}, months={months}")
        await message.reply("‚ùå –•–∞—Ç–æ–ª–∏–∫: –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
        await state.finish()
        return

    user = db.get_user(user_id)
    promo_code = user[10] if user else None
    telegram = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    caption = (
        f"üì• –Ø–Ω–≥–∏ —Ç—û–ª–æ–≤ —Ç–µ–∫—à–∏—Ä–∏—à —É—á—É–Ω:\n\n"
        f"üÜî –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: {user_id}\n"
        f"üìß Email: {obfuscate_email(email)}\n"
        f"üë§ Telegram: {telegram}\n"
        f"üìÖ –¢–∞–Ω–ª–∞–Ω–≥–∞–Ω —Ç–∞—Ä–∏—Ñ: {months} –æ–π\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}"
    )

    try:
        for admin_id in ADMIN_IDS:
            if message.photo:
                await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption, reply_markup=get_confirmation_buttons(user_id))
            elif message.document:
                await bot.send_document(admin_id, message.document.file_id, caption=caption, reply_markup=get_confirmation_buttons(user_id))
            else:
                await bot.send_message(admin_id, caption + f"\n\nüìÑ –ú–∞—Ç–Ω:\n{message.text}", reply_markup=get_confirmation_buttons(user_id))
        await message.reply("üßæ –†–∞“≥–º–∞—Ç! –ë–∏–∑ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–≥–∞ —é–±–æ—Ä–¥–∏–∫. ‚è≥ –ñ–∞–≤–æ–±–Ω–∏ –∫—É—Ç–∏–Ω–≥.")
        logger.info(f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É: user_id={user_id}, months={months}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply("‚ùå –ß–µ–∫–Ω–∏ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("payment_approve_"))
async def confirm_payment(callback_query: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    parts = callback_query.data.split("_")
    if len(parts) != 4:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
        await callback_query.answer("‚ùå –•–∞—Ç–æ–ª–∏–∫: –Ω–æ—Ç—û“ì—Ä–∏ —Å—û—Ä–æ–≤.")
        return

    user_id = int(parts[2])
    months = int(parts[3])
    user = db.get_user(user_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer("‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return

    email = user[3]
    promo_code = user[10]
    bonus = calculate_bonus(months)
    db.update_payment(user_id, months, bonus)

    if callback_query.message.text:
        await callback_query.message.edit_text(
            f"‚úÖ {obfuscate_email(email)} —É—á—É–Ω —Ç—û–ª–æ–≤ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏. “ö—û—à–∏–ª–¥–∏: {months} –æ–π + {bonus} –æ–π üéÅ\n"
            f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}"
        )
    else:
        await bot.send_message(
            callback_query.message.chat.id,
            f"‚úÖ {obfuscate_email(email)} —É—á—É–Ω —Ç—û–ª–æ–≤ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏. “ö—û—à–∏–ª–¥–∏: {months} –æ–π + {bonus} –æ–π üéÅ\n"
            f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}"
        )
        await callback_query.message.delete()

    await bot.send_message(
        user_id,
        "‚úÖ –•—É—à –∫–µ–ª–∏–±—Å–∏–∑! –ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑–≥–∞ —û—Ç–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥.",
        reply_markup=get_main_menu()
    )
    await bot.send_message(user_id, f"üéâ –¢–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑! –°–∏–∑ {months} –æ–π–≥–∞ –æ–±—É–Ω–∞ —Ö–∞—Ä–∏–¥ “õ–∏–ª–¥–∏–Ω–≥–∏–∑ –≤–∞ +{bonus} –æ–π –±–æ–Ω—É—Å –æ–ª–∞—Å–∏–∑!")
    logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: user_id={user_id}, months={months}, bonus={bonus}")

@dp.callback_query_handler(lambda c: c.data.startswith("payment_reject_"))
async def reject_payment(callback_query: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    user_id = int(callback_query.data.split("_")[2])
    await bot.send_message(user_id, "‚ùå –ê—Ñ—Å—É—Å–∫–∏, —Ç—û–ª–æ–≤ —Ç–µ–∫—à–∏—Ä–∏—à–¥–∞–Ω —û—Ç–º–∞–¥–∏. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥ —ë–∫–∏ “õ—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞—à —Ö–∏–∑–º–∞—Ç–∏–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.")
    await callback_query.answer("–¢—û–ª–æ–≤ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏.")
    logger.info(f"–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª–∏–º")
async def profile_info(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id: {user_id}")
    user = db.get_user(user_id)
    if user:
        user_id, _, source, email, telegram, books, trial_end, payment_due, paid, confirmed, promo_code, is_active = user
        if is_active == 0:
            await message.answer(
                "‚ùå –°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–¥–∏ –≤–∞ —Å–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏–Ω–≥–∏–∑.\n"
                "–Ø–Ω–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥ –≤–∞ —á–µ–∫–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.",
                reply_markup=get_payment_options(user_id)
            )
            await UserState.payment.set()
            await message.answer("üí≥ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
            return
        text = format_user_info(user_id, source, email, telegram, books, trial_end, payment_due, paid, confirmed, promo_code, is_active) + "\n\n–°–∏–∑ “õ—É–π–∏–¥–∞ –æ–±—É–Ω–∞–Ω–∏ —É–∑–∞–π—Ç–∏—Ä–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω:"
        await message.answer(text, reply_markup=get_profile_buttons(email), parse_mode="Markdown")
    else:
        await message.answer(
            "üëã *–°–∏–∑ “≥–∞–ª–∏ Wordzen'–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–Ω–≥–∏–∑!*\n\n"
            "–ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–Ω–∏ –±–æ—à–ª–∞—à –≤–∞ 3 –∫—É–Ω–ª–∏–∫ –±–µ–ø—É–ª –º—É–¥–¥–∞—Ç –æ–ª–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("\u25B6\uFE0F –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à", callback_data="start_registration")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith("extend_subscription_"))
async def extend_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    email = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id
    user = db.get_user(user_id)
    if user and user[3] == email:
        await callback_query.message.edit_text("üí≥ –û–±—É–Ω–∞–Ω–∏ —É–∑–∞–π—Ç–∏—Ä–∏—à —É—á—É–Ω —Ç–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=get_payment_options(user_id))
    else:
        await callback_query.message.edit_text("‚ùó –°–∏–∑–Ω–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

@dp.message_handler(lambda message: message.text == "üì© –ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à")
async def message_to_admin(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if not user or user[11] == 0:
        await message.answer("‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–Ω–≥–∏–∑ —ë–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥–∏–∑ —û—á–∏—Ä–∏–ª–≥–∞–Ω.")
        return
    await message.answer("–ê–¥–º–∏–Ω–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–Ω–≥ (–º–∞—Ç–Ω, —Ñ–æ—Ç–æ —ë–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.update_data(user_id=user_id)
    await UserState.message_to_admin.set()

@dp.message_handler(state=UserState.message_to_admin, content_types=types.ContentType.ANY)
async def send_message_to_admin(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    user = db.get_user(user_id)
    if not user:
        await message.reply("‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        await state.finish()
        return

    email = user[3]
    telegram = user[4]
    db.add_message(user_id, message.text if message.text else "–ú–µ–¥–∏–∞ —Ö–∞–±–∞—Ä")

    caption = (
        f"üì© –Ø–Ω–≥–∏ —Ö–∞–±–∞—Ä:\n\n"
        f"üÜî –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID: {user_id}\n"
        f"üìß Email: {obfuscate_email(email)}\n"
        f"üë§ Telegram: {telegram}\n"
    )
    reply_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úçÔ∏è –ñ–∞–≤–æ–± –±–µ—Ä–∏—à", callback_data=f"reply_to_{user_id}")
    )

    try:
        for admin_id in ADMIN_IDS:
            if message.photo:
                await bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption, reply_markup=reply_button)
            elif message.document:
                await bot.send_document(admin_id, message.document.file_id, caption=caption, reply_markup=reply_button)
            else:
                await bot.send_message(admin_id, caption + f"üìÑ –ú–∞—Ç–Ω:\n{message.text}", reply_markup=reply_button)
        await message.reply("‚úÖ –•–∞–±–∞—Ä –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏. –ñ–∞–≤–æ–±–Ω–∏ –∫—É—Ç–∏–Ω–≥.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await message.reply("‚ùå –•–∞–±–∞—Ä–Ω–∏ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("reply_to_"))
async def reply_to_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[2])
    await callback_query.message.answer("–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ –∂–∞–≤–æ–±–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ (–º–∞—Ç–Ω, —Ñ–æ—Ç–æ —ë–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç):")
    await state.update_data(user_id=user_id)
    await UserState.reply_to_user.set()

@dp.message_handler(state=UserState.reply_to_user, content_types=types.ContentType.ANY)
async def send_reply_to_user(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    db.add_message(user_id, message.text if message.text else "–ú–µ–¥–∏–∞ —Ö–∞–±–∞—Ä", is_from_user=False)

    try:
        if message.photo:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "–ê–¥–º–∏–Ω–¥–∞–Ω –∂–∞–≤–æ–±:")
        elif message.document:
            await bot.send_document(user_id, message.document.file_id, caption=message.caption or "–ê–¥–º–∏–Ω–¥–∞–Ω –∂–∞–≤–æ–±:")
        else:
            await bot.send_message(user_id, f"üì© –ê–¥–º–∏–Ω–¥–∞–Ω –∂–∞–≤–æ–±:\n{message.text}")
        await message.reply("‚úÖ –ñ–∞–≤–æ–± —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.reply("‚ùå –ñ–∞–≤–æ–±–Ω–∏ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫. –Ø–Ω–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
    await state.finish()

@dp.message_handler(commands=["users"])
async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –°–∏–∑–¥–∞ –±—É –∫–æ–º–∞–Ω–¥–∞ —É—á—É–Ω —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return
    users = db.get_all_users()
    text = "üë• –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n"
    for user in users:
        user_id, source, email, telegram, books, trial_end, payment_due, paid, confirmed, promo_code, is_active = user
        text += f"\nüÜî {user_id}\nüì° –ë–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω —Ç–æ–ø–¥–∏: {source}\nüìß {obfuscate_email(email)}\nüë§ {telegram}\nüìö –ö–∏—Ç–æ–±–ª–∞—Ä: {books or '—Ç–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω'}\n‚è≥ –°–∏–Ω–æ–≤: {trial_end}\n‚è≥ –û–±—É–Ω–∞: {payment_due}\nüí∞ –û–π–ª–∞—Ä: {paid}\n‚úÖ –¢—û–ª–∞–Ω–≥–∞–Ω: {'“≤–∞' if confirmed else '–ô—û“õ'}\nüéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '“õ—û–ª–ª–∞–Ω–∏–ª–º–∞–≥–∞–Ω'}\nüîÑ –ê–∫—Ç–∏–≤: {'–§–∞–æ–ª' if is_active else '–é—á–∏—Ä–∏–ª–≥–∞–Ω'}\n---"
    await message.answer(text)

@dp.message_handler(commands=["promo_stats"])
async def promo_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –°–∏–∑–¥–∞ –±—É –∫–æ–º–∞–Ω–¥–∞ —É—á—É–Ω —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return
    stats = db.get_promo_stats()
    if not stats:
        await message.answer("üìä “≤–æ–∑–∏—Ä—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–ª–∞—Ä –π—û“õ.")
        return
    text = "üìä –ü—Ä–æ–º–æ–∫–æ–¥–ª–∞—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å–∏:\n"
    for code, teacher_name, used_count, bonus_days in stats:
        text += f"\n–ö–æ–¥: `{code}`\n–é“õ–∏—Ç—É–≤—á–∏: {teacher_name}\n–§–æ–π–¥–∞–ª–∞–Ω–∏–ª–¥–∏: {used_count}\n–ë–æ–Ω—É—Å: {bonus_days} –∫—É–Ω\n---"
    await message.answer(text)

@dp.message_handler(commands=["stats"])
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –°–∏–∑–¥–∞ –±—É –∫–æ–º–∞–Ω–¥–∞ —É—á—É–Ω —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return
    total_users, paid_users, promo_users = db.get_stats()
    text = (
        "üìä –£–º—É–º–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ñ–∞–º–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä: {total_users}\n"
        f"üí≥ –û–±—É–Ω–∞ —Ç—û–ª–∞–≥–∞–Ω–ª–∞—Ä: {paid_users}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∏—à–ª–∞—Ç–≥–∞–Ω–ª–∞—Ä: {promo_users}"
    )
    await message.answer(text)

@dp.message_handler(commands=["reset"])
async def reset_books_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –°–∏–∑–¥–∞ –±—É –∫–æ–º–∞–Ω–¥–∞ —É—á—É–Ω —Ä—É—Ö—Å–∞—Ç –π—û“õ.")
        return
    try:
        user_id = int(message.get_args())
        user = db.get_user(user_id)
        if not user:
            await message.answer(f"‚ùå ID {user_id} –±–∏–ª–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            return
        db.reset_books(user_id)
        await message.answer(f"‚úÖ ID {user_id} —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏—Å–∏ —É—á—É–Ω –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–æ–∑–∞–ª–∞–Ω–¥–∏. –≠–Ω–¥–∏ —É —è–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞–π –æ–ª–∞–¥–∏.")
        await bot.send_message(user_id, "üìö –°–∏–∑–Ω–∏–Ω–≥ –∫–∏—Ç–æ–±–ª–∞—Ä–∏–Ω–≥–∏–∑ —Ç–æ–∑–∞–ª–∞–Ω–¥–∏. –Ø–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞—à —É—á—É–Ω /start –±—É–π—Ä—É“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.")
    except ValueError:
        await message.answer("‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID'–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥. –ú–∞—Å–∞–ª–∞–Ω: /reset 123456789")

@dp.callback_query_handler(lambda c: c.data.startswith("reset_books_"))
async def reset_books_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[2])
    user = db.get_user(user_id)
    if not user:
        await callback_query.message.edit_text("‚ùå –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return
    db.reset_books(user_id)
    await callback_query.message.edit_text(
        "üìö –°–∏–∑–Ω–∏–Ω–≥ –∫–∏—Ç–æ–±–ª–∞—Ä–∏–Ω–≥–∏–∑ —Ç–æ–∑–∞–ª–∞–Ω–¥–∏. –Ø–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞—à —É—á—É–Ω —Ä–∞“õ–∞–º–ª–∞—Ä–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:\n"
        "–†—û–π—Ö–∞—Ç:\n" + "\n".join(f"{i+1}. {book}" for i, book in enumerate(BOOKS))
    )
    await state.update_data(user_id=user_id)
    await UserState.reset_books.set()

@dp.message_handler(state=UserState.reset_books)
async def choose_new_books(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data["user_id"]
    try:
        book_indices = [int(i.strip()) - 1 for i in message.text.split("\n") if i.strip().isdigit()]
        if len(book_indices) != 3:
            await message.answer("–ò–ª—Ç–∏–º–æ—Å, –∞–π–Ω–∞–Ω 3 —Ç–∞ –∫–∏—Ç–æ–± —Ç–∞–Ω–ª–∞–Ω–≥. –†–∞“õ–∞–º–ª–∞—Ä–Ω–∏ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥:")
            return
        if any(i < 0 or i >= len(BOOKS) for i in book_indices):
            await message.answer("–ù–æ—Ç—û“ì—Ä–∏ —Ä–∞“õ–∞–º–ª–∞—Ä. –†—û–π—Ö–∞—Ç–¥–∞–Ω 3 —Ç–∞ –∫–∏—Ç–æ–± —Ä–∞“õ–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
            return
        books = ", ".join(BOOKS[i] for i in book_indices)
        db.cursor.execute("UPDATE users SET books = %s WHERE user_id = %s", (books, user_id))
        db.conn.commit()
        await message.answer("‚úÖ –Ø–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞–Ω–¥–∏. –¢—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥:", reply_markup=get_payment_options(user_id))
        await UserState.payment.set()
        await message.answer("üí≥ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
    except ValueError:
        await message.answer("–†–∞“õ–∞–º–ª–∞—Ä–Ω–∏ —Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥, –º–∞—Å–∞–ª–∞–Ω:\n1\n2\n3")
        return

async def check_payments():
    while True:
        now = datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        for user_id, email, telegram in db.get_unpaid_users(now):
            db.deactivate_user(user_id)
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚ùó –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —û—á–∏—Ä–∏–ª–¥–∏ (—Ç—û–ª–æ–≤ “õ–∏–ª–º–∞–¥–∏):\nEmail: {obfuscate_email(email)}\nTelegram: {telegram}")
            try:
                await bot.send_message(user_id, "‚ùå –°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–¥–∏ –≤–∞ —Å–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏–Ω–≥–∏–∑.\n–Ø–Ω–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥ –≤–∞ —á–µ–∫–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.", reply_markup=get_payment_options(user_id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        for user_id, email, telegram in db.get_users_near_trial_end(tomorrow):
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚è∞ –≠—Ä—Ç–∞–≥–∞ —Å–∏–Ω–æ–≤ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–π–¥–∏:\nEmail: {obfuscate_email(email)}\nTelegram: {telegram}")
            try:
                await bot.send_message(user_id, f"‚è≥ –≠—Ä—Ç–∞–≥–∞ Wordzen'–¥–∞ —Å–∏–Ω–æ–≤ –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–π–¥–∏. –û–±—É–Ω–∞–Ω–∏ —É–∑–∞–π—Ç–∏—Ä–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥:", reply_markup=get_payment_options(user_id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ –∫–Ω–∏–≥ (–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)
        users = db.get_all_users()
        for user in users:
            user_id, _, _, _, _, _, payment_due, _, _, _, is_active = user
            if is_active and payment_due:
                due_date = datetime.strptime(payment_due, '%Y-%m-%d')
                if due_date <= datetime.now():
                    try:
                        await bot.send_message(user_id, "üìö –°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑ —Ç—É–≥–∞–¥–∏. –Ø–Ω–≥–∏ –∫–∏—Ç–æ–±–ª–∞—Ä —Ç–∞–Ω–ª–∞—à —É—á—É–Ω /start –±—É–π—Ä—É“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥ —ë–∫–∏ –∞–¥–º–∏–Ω–≥–∞ /reset –±—É–π—Ä—É“ì–∏ –æ—Ä“õ–∞–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏–Ω–≥.", reply_markup=get_reset_books_button(user_id))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

        await asyncio.sleep(86400)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ webhook'–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
async def on_startup(_):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook: {webhook_info.url}. –£–¥–∞–ª—è–µ–º –µ–≥–æ...")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω.")
    else:
        logger.info("Webhook –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å polling.")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    keep_alive()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(dp))
    loop.create_task(check_payments())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
