import os
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keep_alive import keep_alive

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üë§ –ê–∫–∫–∞—É–Ω—Ç"))



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ Replit Secrets
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_LINK = "https://t.me/your_channel"
CARD_NUMBER = "1234 5678 9012 3456"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY, 
                    email TEXT, 
                    telegram TEXT, 
                    books TEXT,
                    trial_end TEXT,
                    payment_due TEXT,
                    paid_months INTEGER DEFAULT 0,
                    payment_confirmed INTEGER DEFAULT 0)''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    email = State()
    telegram = State()
    books = State()
    payment = State()

# /start –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    with open("wordzen_logo.jpg", "rb") as photo:
        await bot.send_photo(
            message.chat.id,
            photo=photo,
            caption=(
                "\U0001F4DA *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wordzen!*\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º.\n\n"
                "\U0001F381 *3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!*\n\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å \U0001F447"
            ),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("\u25B6\uFE0F –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="start_registration")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "start_registration")
async def start_registration(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "\U0001F4E7 –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await UserState.email.set()

@dp.message_handler(state=UserState.email)
async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç:")
    await UserState.telegram.set()

@dp.message_handler(state=UserState.telegram)
async def get_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text)
    await state.update_data(books=[])

    books = ["–ö–Ω–∏–≥–∞ 1", "–ö–Ω–∏–≥–∞ 2", "–ö–Ω–∏–≥–∞ 3", "–ö–Ω–∏–≥–∞ 4"]
    markup = InlineKeyboardMarkup(row_width=2)
    for book in books:
        markup.add(InlineKeyboardButton(book, callback_data=f"book_{book}"))
    markup.add(InlineKeyboardButton("\U0001F4E6 –ì–æ—Ç–æ–≤–æ", callback_data='confirm_books'))

    await message.answer("\U0001F4DA –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —à—Ç—É–∫:", reply_markup=markup)
    await UserState.books.set()

@dp.callback_query_handler(lambda c: c.data.startswith('book_'), state=UserState.books)
async def choose_books(callback_query: types.CallbackQuery, state: FSMContext):
    book = callback_query.data[5:]
    user_data = await state.get_data()
    chosen_books = user_data.get('books', []) or []

    if book in chosen_books:
        chosen_books.remove(book)
    elif len(chosen_books) < 3:
        chosen_books.append(book)
    else:
        await callback_query.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–∏–≥–∏.")
        return

    await state.update_data(books=chosen_books)

    all_books = ["–ö–Ω–∏–≥–∞ 1", "–ö–Ω–∏–≥–∞ 2", "–ö–Ω–∏–≥–∞ 3", "–ö–Ω–∏–≥–∞ 4"]
    markup = InlineKeyboardMarkup(row_width=2)
    for b in all_books:
        prefix = "\u2705 " if b in chosen_books else ""
        markup.add(InlineKeyboardButton(prefix + b, callback_data=f"book_{b}"))
    markup.add(InlineKeyboardButton("\U0001F4E6 –ì–æ—Ç–æ–≤–æ", callback_data='confirm_books'))

    selected_text = (
        "\U0001F4DA *–í—ã –≤—ã–±—Ä–∞–ª–∏:*\n" + "\n".join([f"‚Ä¢ {b}" for b in chosen_books])
        if chosen_books else "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏."
    )

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=selected_text + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3 –∫–Ω–∏–≥:",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == 'confirm_books', state=UserState.books)
async def confirm_books(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    email = user_data['email']
    telegram = user_data['telegram']
    books = ', '.join(user_data.get('books', []))
    trial_end = (datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')
    payment_due = trial_end

    cursor.execute(
        "INSERT INTO users (email, telegram, books, trial_end, payment_due) VALUES (?, ?, ?, ?, ?)",
        (email, telegram, books, trial_end, payment_due)
    )
    conn.commit()

    text = (
        f"üìù *–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* üéâ\n\n"
        f"üìß Email: `{email}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"‚è≥ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: *{trial_end}*\n\n"
        f"üí≥ –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ."
    )

    buttons = InlineKeyboardMarkup(row_width=1)
    buttons.add(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_options")
    )
@dp.callback_query_handler(lambda c: c.data == "payment_options")
async def show_tariffs(callback_query: types.CallbackQuery):
    tariffs = InlineKeyboardMarkup(row_width=1)
    tariffs.add(
        InlineKeyboardButton("üìÖ 1 –º–µ—Å—è—Ü ‚Äî 100‚ÇΩ", callback_data="pay_1"),
        InlineKeyboardButton("üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 300‚ÇΩ +1 –º–µ—Å üéÅ", callback_data="pay_3"),
        InlineKeyboardButton("üìÖ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 600‚ÇΩ +2 –º–µ—Å üéÅ", callback_data="pay_6")
    )
    await callback_query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs)

  @dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def start_payment(callback_query: types.CallbackQuery, state: FSMContext):
    months = int(callback_query.data.split("_")[1])
    email = None

    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT email FROM users WHERE telegram = ?", (f"https://t.me/{callback_query.from_user.username}",))
    row = cursor.fetchone()
    if row:
        email = row[0]
        await state.update_data(email=email, months=months)
        await UserState.payment.set()

        await bot.send_message(
            callback_query.from_user.id,
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–æ: *{months} –º–µ—Å.*\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{CARD_NUMBER}`\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –¥–æ 30 –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à email –≤ –±–∞–∑–µ.")
@dp.callback_query_handler(lambda c: c.data.startswith("payment_approve_"))
async def confirm_payment_with_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])

    cursor.execute("SELECT email FROM users WHERE telegram LIKE ?", (f"%{user_id}%",))
    row = cursor.fetchone()
    if not row:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    email = row[0]
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
    months = 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bonus = 0

    # –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ ‚Äî —Ö—Ä–∞–Ω–∏ –µ–≥–æ –≤ –ë–î –∏–ª–∏ FSM

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤:
    if months == 3:
        bonus = 1
    elif months == 6:
        bonus = 2

    total = months + bonus

    cursor.execute(
        "UPDATE users SET paid_months = paid_months + ?, payment_confirmed = 1 WHERE email = ?",
        (total, email)
    )
    conn.commit()

    await bot.send_message(callback_query.message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {email}. –î–æ–±–∞–≤–ª–µ–Ω–æ: {months} –º–µ—Å + {bonus} –º–µ—Å üéÅ")
    await bot.send_message(
    callback_query.from_user.id,
    "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É.",
    reply_markup=main_menu
)
    cursor.execute("SELECT telegram FROM users WHERE email = ?", (email,))
    tg = cursor.fetchone()[0]
    await bot.send_message(tg, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ +{bonus} –º–µ—Å—è—Ü–µ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!")

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=buttons
    )

    await state.finish()

@dp.message_handler(commands=['ping'])
async def ping(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")



@dp.callback_query_handler(lambda c: c.data.startswith('payment_check_'))
async def ask_payment(callback_query: types.CallbackQuery, state: FSMContext):
    email = callback_query.data.split('_')[-1]

    await state.update_data(email=email)
    await UserState.payment.set()

    await bot.send_message(
        callback_query.from_user.id,
        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{CARD_NUMBER}`\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.\n"
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ *30 –º–∏–Ω—É—Ç*.",
        parse_mode="Markdown"
    )

    await UserState.payment.set()
    async with FSMContext(callback_query.from_user.id, callback_query.from_user.id, dp.storage) as state:
        await state.update_data(email=email)
    async with FSMContext(callback_query.from_user.id, callback_query.from_user.id, dp.storage) as state:
        await state.update_data(email=email)

@dp.message_handler(state=UserState.payment, content_types=types.ContentType.ANY)
async def receive_any_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    email = user_data.get('email', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    telegram = message.from_user.username or message.from_user.full_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    caption = f"üì• –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\nüìß Email: {email}\nüë§ Telegram: @{telegram}"

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'payment_approve_{message.from_user.id}'),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'payment_reject_{message.from_user.id}')
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        if message.content_type == "photo":
            await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=markup)
        elif message.content_type == "document":
            await bot.send_document(ADMIN_ID, message.document.file_id, caption=caption, reply_markup=markup)
        elif message.content_type == "text":
            await bot.send_message(ADMIN_ID, caption + f"\n\nüìÑ –¢–µ–∫—Å—Ç:\n{message.text}", reply_markup=markup)
        else:
            await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
            await bot.send_message(ADMIN_ID, caption, reply_markup=markup)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É:", e)

    await message.reply("üßæ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('payment_approve_'))
async def approve_payment(callback_query: types.CallbackQuery):
            user_id = int(callback_query.data.split('_')[-1])
            await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ üôå")
            await bot.answer_callback_query(callback_query.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

@dp.callback_query_handler(lambda c: c.data.startswith('payment_reject_'))
async def reject_payment(callback_query: types.CallbackQuery):
            user_id = int(callback_query.data.split('_')[-1])
            await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await bot.answer_callback_query(callback_query.id, "–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–ø–ª–∞—Ç + –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞
async def check_payments():
    while True:
        now = datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

        cursor.execute("SELECT email, telegram FROM users WHERE payment_due = ? AND payment_confirmed = 0", (now,))
        unpaid_users = cursor.fetchall()
        for email, telegram in unpaid_users:
            await bot.send_message(ADMIN_ID, f"‚ùó –£—á–µ–Ω–∏–∫ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª:\nEmail: {email}\nTelegram: {telegram}")

        cursor.execute("SELECT email, telegram FROM users WHERE trial_end = ? AND payment_confirmed = 0", (tomorrow,))
        soon_ending = cursor.fetchall()
        for email, telegram in soon_ending:
            await bot.send_message(ADMIN_ID, f"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–∞–ª —É:\nEmail: {email}\nTelegram: {telegram}")
            try:
                await bot.send_message(telegram, "‚è≥ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ Wordzen. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø!\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + CARD_NUMBER)
            except:
                pass

        await asyncio.sleep(86400)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(commands=['users'])
async def list_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT email, telegram, trial_end, paid_months, payment_confirmed FROM users")
    users = cursor.fetchall()
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        email, telegram, trial_end, paid, confirmed = user
        text += f"\nüìß {email}\nüë§ {telegram}\n‚è≥ –î–æ: {trial_end}\nüí∞ –ú–µ—Å—è—Ü–µ–≤: {paid}\n‚úÖ –û–ø–ª–∞—á–µ–Ω: {'–î–∞' if confirmed else '–ù–µ—Ç'}\n---"
    await message.answer(text)


@dp.message_handler(lambda message: message.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
async def account_info(message: types.Message):
    telegram_link = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name

    cursor.execute("SELECT email, books, trial_end, paid_months, payment_confirmed FROM users WHERE telegram = ?", (telegram_link,))
    user = cursor.fetchone()

    if user:
        email, books, trial_end, paid, confirmed = user
        text = (
            f"üë§ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:*\n"
            f"üìß Email: `{email}`\n"
            f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
            f"‚è≥ –î–æ—Å—Ç—É–ø –¥–æ: *{trial_end}*\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤: {paid}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω–æ' if confirmed else '–ü—Ä–æ–±–Ω—ã–π/–Ω–µ –æ–ø–ª–∞—á–µ–Ω'}"
        )

        buttons = InlineKeyboardMarkup(row_width=2)
        buttons.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'payment_check_{email}'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        )

        await message.answer(text, reply_markup=buttons, parse_mode="Markdown")
    else:
        await message.answer("‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    keep_alive()
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(check_payments())
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
