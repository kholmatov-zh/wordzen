import os
import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from .database import Database
from .keyboards import *
from .utils import format_user_info, calculate_bonus
from datetime import datetime, timedelta

TOKEN = os.getenv("TOKEN")
ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",") if admin_id]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
CHANNEL_LINK = "https://t.me/your_channel"
CARD_NUMBER = "1234 5678 9012 3456"

class UserState(StatesGroup):
    email = State()
    telegram = State()
    books = State()
    payment = State()

db = Database()

async def start(message: types.Message):
    try:
        with open("wordzen_logo.jpg", "rb") as photo:
            await message.bot.send_photo(
                message.chat.id,
                photo=photo,
                caption=(
                    "\U0001F4DA *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wordzen!*\n\n"
                    "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º.\n\n"
                    "\U0001F381 *3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!*\n\n"
                    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å \U0001F447"
                ),
                parse_mode="Markdown",
                reply_markup=get_start_button()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_registration(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("\U0001F4E7 –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await UserState.email.set()

async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç:")
    await UserState.telegram.set()

async def get_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text)
    await state.update_data(books=[])
    await message.answer("\U0001F4DA –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —à—Ç—É–∫:", reply_markup=get_books_keyboard())
    await UserState.books.set()

async def choose_books(callback_query: types.CallbackQuery, state: FSMContext):
    book = callback_query.data[5:]
    user_data = await state.get_data()
    chosen_books = user_data.get("books", [])

    if book in chosen_books:
        chosen_books.remove(book)
    elif len(chosen_books) < 3:
        chosen_books.append(book)
    else:
        await callback_query.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–∏–≥–∏.")
        return

    await state.update_data(books=chosen_books)
    selected_text = (
        "\U0001F4DA *–í—ã –≤—ã–±—Ä–∞–ª–∏:*\n" + "\n".join([f"‚Ä¢ {b}" for b in chosen_books])
        if chosen_books else "–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏."
    )
    await callback_query.message.edit_text(
        selected_text + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3 –∫–Ω–∏–≥:",
        reply_markup=get_books_keyboard(chosen_books),
        parse_mode="Markdown"
    )

async def confirm_books(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    email = user_data["email"]
    telegram = user_data["telegram"]
    books = ", ".join(user_data.get("books", []))
    db.add_user(email, telegram, books)

    text = (
        f"üìù *–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* üéâ\n\n"
        f"üìß Email: `{email}`\n"
        f"üë§ Telegram: `{telegram}`\n"
        f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        f"‚è≥ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: *{(datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')}*\n\n"
        f"üí≥ –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ."
    )
    buttons = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_options")
    )
    await callback_query.message.edit_text(text, reply_markup=buttons, parse_mode="Markdown")
    await state.finish()

async def show_tariffs(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_payment_options())

async def start_payment(callback_query: types.CallbackQuery, state: FSMContext):
    months = int(callback_query.data.split("_")[1])
    telegram = f"https://t.me/{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name
    user = db.get_user(telegram)
    if user:
        await state.update_data(email=user[1], months=months)
        await callback_query.message.answer(
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: *{months} –º–µ—Å.*\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{CARD_NUMBER}`\n\n"
            f"üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –¥–æ 30 –º–∏–Ω.",
            parse_mode="Markdown"
        )
        await UserState.payment.set()
    else:
        await callback_query.message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")

async def receive_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    email = user_data.get("email")
    telegram = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    caption = f"üì• –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\nüìß Email: {email}\nüë§ Telegram: @{telegram}"

    try:
        for admin_id in ADMIN_IDS:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            if message.photo:
                await message.bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption, reply_markup=get_confirmation_buttons(message.from_user.id))
            elif message.document:
                await message.bot.send_document(admin_id, message.document.file_id, caption=caption, reply_markup=get_confirmation_buttons(message.from_user.id))
            else:
                await message.bot.send_message(admin_id, caption + f"\n\nüìÑ –¢–µ–∫—Å—Ç:\n{message.text}", reply_markup=get_confirmation_buttons(message.from_user.id))
        await message.reply("üßæ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.finish()

async def confirm_payment(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[-1])
    telegram = f"https://t.me/{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name
    user = db.get_user(telegram)
    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    email = user[1]
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    months = user_data.get("months", 1)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–µ—Å—è—Ü—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    bonus = calculate_bonus(months)
    db.update_payment(email, months, bonus)

    await callback_query.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {email}. –î–æ–±–∞–≤–ª–µ–Ω–æ: {months} –º–µ—Å + {bonus} –º–µ—Å üéÅ")
    await callback_query.message.bot.send_message(
        user_id,
        "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É.",
        reply_markup=get_main_menu()
    )
    await callback_query.message.bot.send_message(telegram, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ +{bonus} –º–µ—Å—è—Ü–µ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!")

async def reject_payment(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[-1])
    await callback_query.message.bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

async def account_info(message: types.Message):
    telegram = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    user = db.get_user(telegram)
    if user:
        email, _, books, trial_end, _, paid, confirmed = user
        await message.answer(format_user_info(email, books, trial_end, paid, confirmed), reply_markup=get_account_buttons(email), parse_mode="Markdown")
    else:
        await message.answer("‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def profile_info(message: types.Message):  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    telegram = f"https://t.me/{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    user = db.get_user(telegram)
    if user:
        email, _, books, trial_end, payment_due, paid, confirmed = user
        text = (
            f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
            f"üìß Email: `{email}`\n"
            f"üë§ Telegram: `{telegram}`\n"
            f"üìö –ö–Ω–∏–≥–∏: {books or '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
            f"‚è≥ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ: *{trial_end}*\n"
            f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: *{payment_due}*\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤: {paid}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω–æ' if confirmed else '–ü—Ä–æ–±–Ω—ã–π/–Ω–µ –æ–ø–ª–∞—á–µ–Ω'}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∏–∂–µ:"
        )
        await message.answer(text, reply_markup=get_profile_buttons(email), parse_mode="Markdown")
    else:
        await message.answer("‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def extend_subscription(callback_query: types.CallbackQuery, state: FSMContext):  # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    email = callback_query.data.split("_")[-1]
    telegram = f"https://t.me/{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name
    user = db.get_user(telegram)
    if user and user[1] == email:
        await callback_query.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=get_payment_options())
    else:
        await callback_query.message.edit_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")

async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

async def list_users(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    users = db.get_all_users()
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        email, telegram, trial_end, paid, confirmed = user
        text += f"\nüìß {email}\nüë§ {telegram}\n‚è≥ –î–æ: {trial_end}\nüí∞ –ú–µ—Å—è—Ü–µ–≤: {paid}\n‚úÖ –û–ø–ª–∞—á–µ–Ω: {'–î–∞' if confirmed else '–ù–µ—Ç'}\n---"
    await message.answer(text)

async def check_payments(bot):
    while True:
        now = datetime.now().strftime('%Y-%m-%d')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

        for email, telegram in db.get_unpaid_users(now):
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚ùó –£—á–µ–Ω–∏–∫ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª:\nEmail: {email}\nTelegram: {telegram}")

        for email, telegram in db.get_users_near_trial_end(tomorrow):
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, f"‚è∞ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–∞–ª —É:\nEmail: {email}\nTelegram: {telegram}")
            try:
                await bot.send_message(telegram, f"‚è≥ –ó–∞–≤—Ç—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ Wordzen. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: {CARD_NUMBER}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {telegram}: {e}")
        await asyncio.sleep(86400)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"])
    dp.register_callback_query_handler(start_registration, lambda c: c.data == "start_registration")
    dp.register_message_handler(get_email, state=UserState.email)
    dp.register_message_handler(get_telegram, state=UserState.telegram)
    dp.register_callback_query_handler(choose_books, lambda c: c.data.startswith("book_"), state=UserState.books)
    dp.register_callback_query_handler(confirm_books, lambda c: c.data == "confirm_books", state=UserState.books)
    dp.register_callback_query_handler(show_tariffs, lambda c: c.data == "payment_options")
    dp.register_callback_query_handler(start_payment, lambda c: c.data.startswith("pay_"))
    dp.register_message_handler(receive_payment, state=UserState.payment, content_types=types.ContentType.ANY)
    dp.register_callback_query_handler(confirm_payment, lambda c: c.data.startswith("payment_approve_"))
    dp.register_callback_query_handler(reject_payment, lambda c: c.data.startswith("payment_reject_"))
    dp.register_message_handler(account_info, lambda message: message.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
    dp.register_message_handler(profile_info, lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.register_callback_query_handler(extend_subscription, lambda c: c.data.startswith("extend_subscription_"))
    dp.register_callback_query_handler(back_to_menu, lambda c: c.data == "back_to_menu")
    dp.register_message_handler(list_users, commands=["users"])
